{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#llm-brains","title":"LLM Brains","text":"<p>\"LLM Brains\" is a JetBrains IDE plugin (for e.g. usage in PhpStorm) to open any (popular) CLI coding agent in a new terminal window. Tested with PhpStorm 2025.2.1 (Build #PS-252.25557.128) and requires the 252.* platform family. It's like the Claude Code button but also provides OpenAI Codex and Google's Gemini CLI, and maybe more in the future.</p> <p></p> <p>It shows the \ud83e\udef4 icon in the top right corner of the IDE. When you click on it, it gives you the following options:</p> <ul> <li>\"Claude Code\" \u21d2 run 'claude' in an IDE terminal window with title '\ud83e\udef4 Claude'</li> <li>\"Codex CLI\" \u21d2 run 'codex' in an IDE terminal window with title '\ud83e\udef4 Codex'</li> <li>\"Gemini CLI\" \u21d2 run 'gemini' in an IDE terminal window with title '\ud83e\udef4 Gemini'</li> <li>\"Qodo Command\" \u21d2 run 'qodo' in an IDE terminal window with title '\ud83e\udef4 Qodo'</li> <li>\"Check what's installed\" \u21d2 run a bash script in an IDE terminal window: for each of the CLI programs above: if it's installed, show the version. If it's not, show how to install it.</li> </ul>"},{"location":"docker/","title":"Development with Docker","text":"<p>This repository includes a Docker-aware Gradle wrapper script (<code>./gradlew</code>) so you can execute plugin tasks without installing Java or Gradle locally. The script launches the <code>gradle:8.7-jdk17-jammy</code> image, mounts the repository into <code>/workspace</code>, and persists Gradle caches under <code>~/.cache/mkdox-gradle</code>.</p> <p>Common commands:</p> <pre><code>./gradlew build\n./gradlew test\n./gradlew runIde\n./gradlew buildPlugin\n</code></pre> <p>Environment knobs:</p> <ul> <li><code>GRADLE_DOCKER_IMAGE</code> overrides the container image tag.</li> <li><code>GRADLE_DOCKER_CACHE</code> changes the host cache location.</li> <li><code>GRADLE_DOCKER_FLAGS</code> appends extra <code>docker run</code> flags (for example <code>\"--network host\"</code>).</li> <li>Set <code>GRADLE_DOCKER_PRESERVE_OWNERSHIP=0</code> if you prefer the container defaults for file ownership.</li> </ul> <p>Docker must be running locally for the wrapper to work.</p>"},{"location":"agents/claude/","title":"Claude Code - by Anthropic","text":""},{"location":"agents/claude/#installation","title":"Installation","text":"<pre><code># Install with npm\nnpm install -g @anthropic-ai/claude-code\n# update to latest version with npm\nnpm update -g @anthropic-ai/claude-code\n</code></pre> <p>via docs.claude.com/en/docs/claude-code/setup</p>"},{"location":"agents/claude/#get-version","title":"Get Version","text":"<pre><code>% claude -v    \n1.0.117 (Claude Code)\n</code></pre>"},{"location":"agents/claude/#usage","title":"Usage","text":"<pre><code>Usage: claude [options] [command] [prompt]\n\nClaude Code - starts an interactive session by default, use -p/--print for non-interactive output\n\nArguments:\n  prompt                                            Your prompt\n\nOptions:\n  -d, --debug [filter]                              Enable debug mode with optional category filtering (e.g., \"api,hooks\" or \"!statsig,!file\")\n  --verbose                                         Override verbose mode setting from config\n  -p, --print                                       Print response and exit (useful for pipes). Note: The workspace trust dialog is skipped when Claude is run with the -p mode. Only use this flag in directories you trust.\n  --output-format &lt;format&gt;                          Output format (only works with --print): \"text\" (default), \"json\" (single result), or \"stream-json\" (realtime streaming) (choices: \"text\", \"json\", \"stream-json\")\n  --include-partial-messages                        Include partial message chunks as they arrive (only works with --print and --output-format=stream-json)\n  --input-format &lt;format&gt;                           Input format (only works with --print): \"text\" (default), or \"stream-json\" (realtime streaming input) (choices: \"text\", \"stream-json\")\n  --mcp-debug                                       [DEPRECATED. Use --debug instead] Enable MCP debug mode (shows MCP server errors)\n  --dangerously-skip-permissions                    Bypass all permission checks. Recommended only for sandboxes with no internet access.\n  --replay-user-messages                            Re-emit user messages from stdin back on stdout for acknowledgment (only works with --input-format=stream-json and --output-format=stream-json)\n  --allowedTools, --allowed-tools &lt;tools...&gt;        Comma or space-separated list of tool names to allow (e.g. \"Bash(git:*) Edit\")\n  --disallowedTools, --disallowed-tools &lt;tools...&gt;  Comma or space-separated list of tool names to deny (e.g. \"Bash(git:*) Edit\")\n  --mcp-config &lt;configs...&gt;                         Load MCP servers from JSON files or strings (space-separated)\n  --append-system-prompt &lt;prompt&gt;                   Append a system prompt to the default system prompt\n  --permission-mode &lt;mode&gt;                          Permission mode to use for the session (choices: \"acceptEdits\", \"bypassPermissions\", \"default\", \"plan\")\n  -c, --continue                                    Continue the most recent conversation\n  -r, --resume [sessionId]                          Resume a conversation - provide a session ID or interactively select a conversation to resume\n  --model &lt;model&gt;                                   Model for the current session. Provide an alias for the latest model (e.g. 'sonnet' or 'opus') or a model's full name (e.g. 'claude-sonnet-4-20250514').\n  --fallback-model &lt;model&gt;                          Enable automatic fallback to specified model when default model is overloaded (only works with --print)\n  --settings &lt;file-or-json&gt;                         Path to a settings JSON file or a JSON string to load additional settings from\n  --add-dir &lt;directories...&gt;                        Additional directories to allow tool access to\n  --ide                                             Automatically connect to IDE on startup if exactly one valid IDE is available\n  --strict-mcp-config                               Only use MCP servers from --mcp-config, ignoring all other MCP configurations\n  --session-id &lt;uuid&gt;                               Use a specific session ID for the conversation (must be a valid UUID)\n  -v, --version                                     Output the version number\n  -h, --help                                        Display help for command\n\nCommands:\n  config                                            Manage configuration (eg. claude config set -g theme dark)\n  mcp                                               Configure and manage MCP servers\n  migrate-installer                                 Migrate from global npm installation to local installation\n  setup-token                                       Set up a long-lived authentication token (requires Claude subscription)\n  doctor                                            Check the health of your Claude Code auto-updater\n  update                                            Check for updates and install if available\n  install [options] [target]                        Install Claude Code native build. Use [target] to specify version (stable, latest, or specific version)\n</code></pre>"},{"location":"agents/codex/","title":"Codex CLI - by OpenAI","text":""},{"location":"agents/codex/#installation","title":"Installation","text":"<pre><code># Install with npm\nnpm install -g @openai/codex\n# update to latest version with npm\nnpm update -g @openai/codex\n\n# Install with Homebrew\nbrew install codex\n</code></pre> <p>via developers.openai.com/codex/cli/</p>"},{"location":"agents/codex/#get-version","title":"Get Version","text":"<pre><code>% codex -V\ncodex-cli 0.36.0\n</code></pre>"},{"location":"agents/codex/#usage","title":"Usage","text":"<pre><code>Codex CLI\n\nIf no subcommand is specified, options will be forwarded to the interactive CLI.\n\nUsage: codex [OPTIONS] [PROMPT]\n       codex [OPTIONS] [PROMPT] &lt;COMMAND&gt;\n\nCommands:\n  exec        Run Codex non-interactively [aliases: e]\n  login       Manage login\n  logout      Remove stored authentication credentials\n  mcp         [experimental] Run Codex as an MCP server and manage MCP servers\n  proto       Run the Protocol stream via stdin/stdout [aliases: p]\n  completion  Generate shell completion scripts\n  debug       Internal debugging commands\n  apply       Apply the latest diff produced by Codex agent as a `git apply` to your local working tree [aliases: a]\n  resume      Resume a previous interactive session (picker by default; use --last to continue the most recent)\n  help        Print this message or the help of the given subcommand(s)\n\nArguments:\n  [PROMPT]\n          Optional user prompt to start the session\n\nOptions:\n  -c, --config &lt;key=value&gt;\n          Override a configuration value that would otherwise be loaded from `~/.codex/config.toml`. Use a dotted path (`foo.bar.baz`) to override nested values. The `value` portion is parsed as JSON. If it fails to parse as JSON, the raw string is\n          used as a literal.\n\n          Examples: - `-c model=\"o3\"` - `-c 'sandbox_permissions=[\"disk-full-read-access\"]'` - `-c shell_environment_policy.inherit=all`\n\n  -i, --image &lt;FILE&gt;...\n          Optional image(s) to attach to the initial prompt\n\n  -m, --model &lt;MODEL&gt;\n          Model the agent should use\n\n      --oss\n          Convenience flag to select the local open source model provider. Equivalent to -c model_provider=oss; verifies a local Ollama server is running\n\n  -p, --profile &lt;CONFIG_PROFILE&gt;\n          Configuration profile from config.toml to specify default options\n\n  -s, --sandbox &lt;SANDBOX_MODE&gt;\n          Select the sandbox policy to use when executing model-generated shell commands\n\n          [possible values: read-only, workspace-write, danger-full-access]\n\n  -a, --ask-for-approval &lt;APPROVAL_POLICY&gt;\n          Configure when the model requires human approval before executing a command\n\n          Possible values:\n          - untrusted:  Only run \"trusted\" commands (e.g. ls, cat, sed) without asking for user approval. Will escalate to the user if the model proposes a command that is not in the \"trusted\" set\n          - on-failure: Run all commands without asking for user approval. Only asks for approval if a command fails to execute, in which case it will escalate to the user to ask for un-sandboxed execution\n          - on-request: The model decides when to ask the user for approval\n          - never:      Never ask for user approval Execution failures are immediately returned to the model\n\n      --full-auto\n          Convenience alias for low-friction sandboxed automatic execution (-a on-failure, --sandbox workspace-write)\n\n      --dangerously-bypass-approvals-and-sandbox\n          Skip all confirmation prompts and execute commands without sandboxing. EXTREMELY DANGEROUS. Intended solely for running in environments that are externally sandboxed\n\n  -C, --cd &lt;DIR&gt;\n          Tell the agent to use the specified directory as its working root\n\n      --search\n          Enable web search (off by default). When enabled, the native Responses `web_search` tool is available to the model (no per\u2011call approval)\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -V, --version\n          Print version\n</code></pre>"},{"location":"agents/gemini/","title":"Gemini CLI - by Google","text":""},{"location":"agents/gemini/#installation","title":"Installation","text":"<pre><code># Install with npm\nnpm install -g @google/gemini-cli\n# update to latest version with npm\nnpm update -g @google/gemini-cli\n\n# Install with Homebrew (only macOS)\nbrew install gemini-cli\n</code></pre> <p>via github.com/google-gemini/gemini-cli</p>"},{"location":"agents/gemini/#get-version","title":"Get Version","text":"<pre><code>% gemini -v\n0.4.1\n</code></pre>"},{"location":"agents/gemini/#usage","title":"Usage","text":"<pre><code>Usage: gemini [options] [command]\n\nGemini CLI - Launch an interactive CLI, use -p/--prompt for non-interactive mode\n\nCommands:\n  gemini [promptWords...]      Launch Gemini CLI                                                                                                                                                                                                  [default]\n  gemini mcp                   Manage MCP servers\n  gemini extensions &lt;command&gt;  Manage Gemini CLI extensions.\n\nOptions:\n  -m, --model                     Model                                                                                                                                                                                                            [string]\n  -p, --prompt                    Prompt. Appended to input on stdin (if any).                                                                     [deprecated: Use the positional prompt instead. This flag will be removed in a future version.] [string]\n  -i, --prompt-interactive        Execute the provided prompt and continue in interactive mode                                                                                                                                                     [string]\n  -s, --sandbox                   Run in sandbox?                                                                                                                                                                                                 [boolean]\n      --sandbox-image             Sandbox image URI.                                                                                                       [deprecated: Use settings.json instead. This flag will be removed in a future version.] [string]\n  -d, --debug                     Run in debug mode?                                                                                                                                                                             [boolean] [default: false]\n  -a, --all-files                 Include ALL files in context?                                                          [deprecated: Use @ includes in the application instead. This flag will be removed in a future version.] [boolean] [default: false]\n      --show-memory-usage         Show memory usage in status bar                                                                        [deprecated: Use settings.json instead. This flag will be removed in a future version.] [boolean] [default: false]\n  -y, --yolo                      Automatically accept all actions (aka YOLO mode, see https://www.youtube.com/watch?v=xvFZjo5PgG0 for more details)?                                                                            [boolean] [default: false]\n      --approval-mode             Set the approval mode: default (prompt for approval), auto_edit (auto-approve edit tools), yolo (auto-approve all tools)                                               [string] [choices: \"default\", \"auto_edit\", \"yolo\"]\n      --telemetry                 Enable telemetry? This flag specifically controls if telemetry is sent. Other --telemetry-* flags set specific values but do not enable telemetry on their own.\n                                                                                                                                                          [deprecated: Use settings.json instead. This flag will be removed in a future version.] [boolean]\n      --telemetry-target          Set the telemetry target (local or gcp). Overrides settings files.                             [deprecated: Use settings.json instead. This flag will be removed in a future version.] [string] [choices: \"local\", \"gcp\"]\n      --telemetry-otlp-endpoint   Set the OTLP endpoint for telemetry. Overrides environment variables and settings files.                                 [deprecated: Use settings.json instead. This flag will be removed in a future version.] [string]\n      --telemetry-otlp-protocol   Set the OTLP protocol for telemetry (grpc or http). Overrides settings files.                  [deprecated: Use settings.json instead. This flag will be removed in a future version.] [string] [choices: \"grpc\", \"http\"]\n      --telemetry-log-prompts     Enable or disable logging of user prompts for telemetry. Overrides settings files.                                      [deprecated: Use settings.json instead. This flag will be removed in a future version.] [boolean]\n      --telemetry-outfile         Redirect all telemetry output to the specified file.                                                                     [deprecated: Use settings.json instead. This flag will be removed in a future version.] [string]\n  -c, --checkpointing             Enables checkpointing of file edits                                                                    [deprecated: Use settings.json instead. This flag will be removed in a future version.] [boolean] [default: false]\n      --experimental-acp          Starts the agent in ACP mode                                                                                                                                                                                    [boolean]\n      --allowed-mcp-server-names  Allowed MCP server names                                                                                                                                                                                          [array]\n      --allowed-tools             Tools that are allowed to run without confirmation                                                                                                                                                                [array]\n  -e, --extensions                A list of extensions to use. If not provided, all extensions are used.                                                                                                                                            [array]\n  -l, --list-extensions           List all available extensions and exit.                                                                                                                                                                         [boolean]\n      --proxy                     Proxy for gemini client, like schema://user:password@host:port                                                           [deprecated: Use settings.json instead. This flag will be removed in a future version.] [string]\n      --include-directories       Additional directories to include in the workspace (comma-separated or multiple --include-directories)                                                                                                            [array]\n      --screen-reader             Enable screen reader mode for accessibility.                                                                                                                                                   [boolean] [default: false]\n      --session-summary           File to write session summary to.                                                                                                                                                                                [string]\n  -v, --version                   Show version number                                                                                                                                                                                             [boolean]\n  -h, --help                      Show help                                                                                                                                                                                                       [boolean]\n</code></pre>"},{"location":"agents/qodo/","title":"Qodo CLI","text":""},{"location":"agents/qodo/#installation","title":"Installation","text":"<pre><code># install with npm\nnpm install -g @qodo/command\n</code></pre>"},{"location":"agents/qodo/#usage","title":"Usage","text":"<pre><code>  Usage\n    $ qodo [options] &lt;prompt&gt;\n    $ qodo run &lt;command&gt; [extra instructions]\n\n  Commands\n    run &lt;command&gt;          Execute a specific agent command with optional extra instructions\n    login                  Log in to Qodo\n    models                 Get available models\n    chat                   Start an interactive chat session\n    key list               List all API keys\n    key create &lt;name&gt;      Create a new API key with the given name\n    key revoke &lt;name&gt;      Revoke an API key by name\n    create-agent           Create a new agent by translating user requirements into a valid configuration\n    list-agents            List available agents from configuration (interactive in CLI mode)\n    list-mcp               List available local and remote tools\n    self-review            Analyze git changes and group them into logical change groups (opens web interface)\n    update                 Manage auto-updates (--check, --install, --configure)\n    -h, --help             Show help and exit\n    chain \"A &gt; B &gt; C\"     Run multiple agents sequentially (quote the chain!)\n    -v, --version          Show version and exit\n    -l, --log=path         Redirect console output to a file | stdout | stderr\n    -y, --yes              Confirm all prompts automatically (useful for CI)\n    -q, --silent           Suppress all console output except the final result (logs go to /dev/null)\n    -d, --debug            Enable debug mode with verbose logging and no data truncation\n    --dir=path         Specify project root directories (can be used multiple times)\n    --ci                   Run commands in CI mode\n    --mcp                  Run commands as tools from agent config in MCP-server-like mode\n    --ui                   Open Qodo with web interface\n    --webhook              Run commands as tools from agent config in webhook mode\n    --slack                Run as Slack bot (HTTP webhook mode by default)\n    -p, --port=number      Specify custom port for server modes (webhook, slack, mcp, ui)\n    --plan                 Use planning execution strategy (agent plans before acting)\n    --act                  Use direct execution strategy (agent acts immediately)\n    -m, --model=model_name Specify a custom model to use\n    --agent-file=path      Specify a custom path to agent configuration file\n    --mcp-file=path        Specify a custom path to mcp.json\n    -r, --resume=session_id Resume a task with the given session ID\n    --set key=value        Set custom key-value pairs (can be used multiple times)\n    --no-builtin           Disable built-in MCP servers (ripgrep, filesystem, git)\n    -t, --tools=list       Specify authorized tools (comma-separated, e.g., shell,git,filesystem)\n                           Note: Some tools have dependencies (e.g., qodo_merge requires git)\n    --tool &lt;name&gt;          Specify authorized tool (can be used multiple times, e.g., --tool shell --tool git --tool filesystem)\n    --permissions=level    Set permissions level (r=read, rw=read+write, rwx=full, -=none)\n    --with=session_id       Preload context with a previous session summarization (used before task/hotstart)\n    --sandbox=mode         Run shell commands in sandbox (macOS only) [off|permissive|restrictive|path/to/profile.sb] (default: off)\n\n  Examples\n    $ qodo chain \"improve &gt; review &gt; open-pr\"\n    $ qodo chain \"improve &gt; review &gt; open-pr\" --chain-step-timeout=600000\n    $ qodo chain \"improve &gt; review &gt; open-pr\" --chain-continue-on-error\n    $ qodo \"Review my latest changes and suggest improvements\"\n    $ qodo run review\n    $ qodo run review \"focus on security issues\"\n    $ qodo review --set coverage_score_threshold=0.8\n    $ qodo self-review\n    $ qodo \"Analyze code\" --dir /path/to/project1 --dir /path/to/project2 --permissions=r\n    $ qodo chat\n    $ qodo key list\n    $ qodo key create my-ci-key\n    $ qodo key revoke my-old-key\n    $ qodo create-agent --set goal=\"review code\" --set description=\"analyze pull requests\"\n    $ qodo list-agents\n    $ qodo list-mcp\n    $ qodo --ui\n    $ qodo --tools=shell,filesystem \"analyze this codebase\"\n    $ qodo --sandbox=./custom-profile.sb \"run a shell command with custom sandbox\"\n</code></pre>"},{"location":"blog/","title":"News","text":""},{"location":"blog/2025/10/v037/","title":"v0.3.7","text":"<p>* added opencode agent * disable/enable agents in Settings/LLM Brains * script (bash/powershell) for checking versions * scripts (bash/powershell) for updating active agents</p>"},{"location":"blog/archive/2025/","title":"2025","text":""},{"location":"blog/category/release/","title":"release","text":""}]}