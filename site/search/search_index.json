{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#llm-brains","title":"LLM Brains","text":"<p>\"LLM Brains\" is a JetBrains IDE plugin (for e.g. usage in PhpStorm) to open any (popular) CLI coding agent in a new terminal window. Tested with PhpStorm 2025.2.1 (Build #PS-252.25557.128) and requires the 252.* platform family. It's like the Claude Code button but also provides OpenAI Codex and Google's Gemini CLI, and maybe more in the future.</p> <p></p> <p>It shows the \ud83e\udef4 icon in the top right corner of the IDE. When you click on it, it gives you the following options:</p> <ul> <li>\"Claude Code\" \u21d2 run 'claude' in an IDE terminal window with title '\ud83e\udef4 Claude'</li> <li>\"Codex CLI\" \u21d2 run 'codex' in an IDE terminal window with title '\ud83e\udef4 Codex'</li> <li>\"Gemini CLI\" \u21d2 run 'gemini' in an IDE terminal window with title '\ud83e\udef4 Gemini'</li> <li>\"Qodo Command\" \u21d2 run 'qodo' in an IDE terminal window with title '\ud83e\udef4 Qodo'</li> <li>\"Check what's installed\" \u21d2 run a bash script in an IDE terminal window: for each of the CLI programs above: if it's installed, show the version. If it's not, show how to install it.</li> </ul>"},{"location":"docker/","title":"Development with Docker","text":"<p>This repository includes a Docker-aware Gradle wrapper script (<code>./gradlew</code>) so you can execute plugin tasks without installing Java or Gradle locally. The script launches the <code>gradle:8.7-jdk17-jammy</code> image, mounts the repository into <code>/workspace</code>, and persists Gradle caches under <code>~/.cache/mkdox-gradle</code>.</p> <p>Common commands:</p> <pre><code>./gradlew build\n./gradlew test\n./gradlew runIde\n./gradlew buildPlugin\n</code></pre> <p>Environment knobs:</p> <ul> <li><code>GRADLE_DOCKER_IMAGE</code> overrides the container image tag.</li> <li><code>GRADLE_DOCKER_CACHE</code> changes the host cache location.</li> <li><code>GRADLE_DOCKER_FLAGS</code> appends extra <code>docker run</code> flags (for example <code>\"--network host\"</code>).</li> <li>Set <code>GRADLE_DOCKER_PRESERVE_OWNERSHIP=0</code> if you prefer the container defaults for file ownership.</li> </ul> <p>Docker must be running locally for the wrapper to work.</p>"},{"location":"agents/amp/","title":"Droid CLI (by Factory.ai)","text":""},{"location":"agents/amp/#installation","title":"Installation","text":"<pre><code># Install with npm\nnpm install -g @sourcegraph/amp\n\n# update to latest version with npm\nnpm update -g @sourcegraph/amp\n</code></pre> <p>via ampcode.com/manual</p>"},{"location":"agents/amp/#get-version","title":"Get Version","text":"<pre><code>% amp --version\n0.0.1759608074-g34c1da (released 2025-10-04T20:05:53.134Z)\n</code></pre>"},{"location":"agents/amp/#usage","title":"Usage","text":"<pre><code>Amp CLI\n\nUsage: amp [options] [command]\n\nCommands:\n\n  logout       Log out by removing stored API key\n  login        Log in to Amp\n  threads      [alias: t, thread] Manage threads\n    new        [alias: n] Create a new thread\n    continue   [alias: c] Continue an existing thread\n    fork       [alias: f] Fork an existing thread\n    list       [alias: l, ls] List all threads\n    share      [alias: s] Share a thread\n    compact    [alias: co] Compact a thread\n  tools        [alias: tool] Tool management commands\n    list       [alias: ls] List all active tools (including MCP tools)\n    show       Show details about an active tool\n    make       Sets up a skeleton tool in your toolbox\n    use        Invoke a tool with arguments or JSON input from stdin\n  permissions  [alias: permission] Manage permissions\n    list       [alias: ls] List permissions\n    test       Test permissions\n    edit       Edit permissions\n    add        Add permission rule\n  mcp          Manage MCP servers\n    add        Add an MCP server configuration\n  connect      Connect CLI to web interface for multi-thread management\n  doctor       Generate support bundle\n  update       Update Amp CLI\n\nOptions:\n\n  --visibility &lt;visibility&gt;\n      Set thread visibility (private, public, workspace, group)\n  -V, --version\n      output the version number\n  --notifications\n      Enable sound notifications (enabled by default when not in execute mode)\n  --no-notifications\n      Disable sound notifications (enabled by default when not in execute mode)\n  --settings-file &lt;value&gt;\n      Custom settings file path (overrides the default location /Users/pforret/.config/amp/settings.json)\n  --log-level &lt;value&gt;\n      Set log level (error, warn, info, debug, audit)\n  --log-file &lt;value&gt;\n      Set log file location (overrides the default location /Users/pforret/.cache/amp/logs/cli.log)\n  --dangerously-allow-all\n      Disable all command confirmation prompts (agent will execute all commands without asking)\n  --jetbrains\n      Enable JetBrains integration. When enabled, Amp automatically includes your open JetBrains file and text selection with every message.\n  --no-jetbrains\n      Disable JetBrains integration.\n  --mcp-config &lt;value&gt;\n      JSON configuration or file path for MCP servers to merge with existing settings\n  -x, --execute [message]\n      Use execute mode, optionally with user message. In execute mode, agent will execute provided prompt (either as argument, or via stdin). Only last assistant message is printed. Enabled automatically when redirecting stdout.\n\nEnvironment variables:\n\n  AMP_API_KEY        API key for Amp (see https://ampcode.com/settings)\n  AMP_URL            URL for the Amp service (default is https://ampcode.com/)\n  AMP_LOG_LEVEL      Set log level (can also use --log-level)\n  AMP_LOG_FILE       Set log file location (can also use --log-file)\n  AMP_SETTINGS_FILE  Set settings file path (can also use --settings-file, default: /Users/pforret/.config/amp/settings.json)\n\nExamples:\n\nStart an interactive session:\n\n  $ amp\n\nStart an interactive session with a user message:\n\n  $ echo \"commit all my unstaged changes\" | amp\n\nUse execute mode (--execute or -x) to send a command to an agent, have it execute it, print only the agent's last message, and then exit:\n\n  $ amp -x \"what file in this folder is in markdown format?\"\n  All Markdown files in this folder:\n  - README.md (root)\n  - AGENT.md (root)\n  - Documentation (7 files in doc/)\n  - Various README.md files in subdirectories\n  Total: **13 Markdown files** found across the project.\n\nUse execute mode and allow agent to use tools that would require approval:\n\n  $ amp --dangerously-allow-all -x \"Rename all .markdown files to .md. Only print list of renamed files.\"\n  - readme.markdown \u2192 readme.md\n  - ghostty.markdown \u2192 ghostty.md\n\nPipe a command to the agent and use execute mode:\n\n  $ echo \"commit all my unstaged changes\" | amp -x --dangerously-allow-all\n  Done. I have committed all your unstaged changes.\n\nPipe data to the agent and send along a prompt in execute mode:\n\n  $ cat ~/.zshrc | amp -x \"what does the 'beautiful' function do?\"\n  The `beautiful` function creates an infinite loop that prints the letter \"o\" in cycling colors every 0.2 seconds.\n\nExecute a prompt from a file and store final assistant message output in a file (redirecting stdout is equivalent to providing -x/--execute):\n\n  $ amp &lt; prompt.txt &gt; output.txt\n\nAdd an MCP server with a local command:\n\n  $ amp mcp add context7 -- npx -y @upstash/context7-mcp\n\nAdd an MCP server with environment variables:\n\n  $ amp mcp add postgres --env PGUSER=orb -- npx -y @modelcontextprotocol/server-postgres postgresql://localhost/orbing\n\nAdd a remote MCP server:\n\n  $ amp mcp add hugging-face https://huggingface.co/mcp\n\nConfiguration:\n\nAmp can be configured using a JSON settings file located at /Users/pforret/.config/amp/settings.json. All settings use the \"amp.\" prefix.\n\nSettings reference:\n\n  amp.notifications.enabled\n      Enable system sound notifications when agent completes tasks\n  amp.notifications.system.enabled\n      Enable system notifications when terminal is not focused\n  amp.mcpServers\n      Model Context Protocol servers to connect to for additional tools\n  amp.tools.disable\n      Array of tool names to disable. Use 'builtin:toolname' to disable only the builtin tool with that name (allowing an MCP server to provide a tool by that name).\n  amp.permissions\n      Permission rules for tool calls. See amp permissions --help\n  amp.guardedFiles.allowlist\n      Array of file glob patterns that are allowed to be accessed without confirmation. Takes precedence over the built-in denylist.\n  amp.dangerouslyAllowAll\n      Disable all command confirmation prompts (agent will execute all commands without asking)\n  amp.git.commit.coauthor.enabled\n      Enable adding Amp as co-author in git commits\n  amp.git.commit.ampThread.enabled\n      Enable adding Amp-Thread trailer in git commits\n  amp.proxy\n      Proxy URL used for both HTTP and HTTPS requests to the Amp server\n  amp.updates.mode\n      Control update checking behavior: \"warn\" shows update notifications, \"disabled\" turns off checking, \"auto\" automatically runs update.\n</code></pre>"},{"location":"agents/claude/","title":"Claude Code - by Anthropic","text":""},{"location":"agents/claude/#installation","title":"Installation","text":"<pre><code># Install with npm\nnpm install -g @anthropic-ai/claude-code\n# update to latest version with npm\nnpm update -g @anthropic-ai/claude-code\n</code></pre> <p>via docs.claude.com/en/docs/claude-code/setup</p>"},{"location":"agents/claude/#get-version","title":"Get Version","text":"<pre><code>% claude -v    \n1.0.117 (Claude Code)\n</code></pre>"},{"location":"agents/claude/#usage","title":"Usage","text":"<pre><code>Usage: claude [options] [command] [prompt]\n\nClaude Code - starts an interactive session by default, use -p/--print for non-interactive output\n\nArguments:\n  prompt                                            Your prompt\n\nOptions:\n  -d, --debug [filter]                              Enable debug mode with optional category filtering (e.g., \"api,hooks\" or \"!statsig,!file\")\n  --verbose                                         Override verbose mode setting from config\n  -p, --print                                       Print response and exit (useful for pipes). Note: The workspace trust dialog is skipped when Claude is run with the -p mode. Only use this flag in directories you trust.\n  --output-format &lt;format&gt;                          Output format (only works with --print): \"text\" (default), \"json\" (single result), or \"stream-json\" (realtime streaming) (choices: \"text\", \"json\", \"stream-json\")\n  --include-partial-messages                        Include partial message chunks as they arrive (only works with --print and --output-format=stream-json)\n  --input-format &lt;format&gt;                           Input format (only works with --print): \"text\" (default), or \"stream-json\" (realtime streaming input) (choices: \"text\", \"stream-json\")\n  --mcp-debug                                       [DEPRECATED. Use --debug instead] Enable MCP debug mode (shows MCP server errors)\n  --dangerously-skip-permissions                    Bypass all permission checks. Recommended only for sandboxes with no internet access.\n  --replay-user-messages                            Re-emit user messages from stdin back on stdout for acknowledgment (only works with --input-format=stream-json and --output-format=stream-json)\n  --allowedTools, --allowed-tools &lt;tools...&gt;        Comma or space-separated list of tool names to allow (e.g. \"Bash(git:*) Edit\")\n  --disallowedTools, --disallowed-tools &lt;tools...&gt;  Comma or space-separated list of tool names to deny (e.g. \"Bash(git:*) Edit\")\n  --mcp-config &lt;configs...&gt;                         Load MCP servers from JSON files or strings (space-separated)\n  --append-system-prompt &lt;prompt&gt;                   Append a system prompt to the default system prompt\n  --permission-mode &lt;mode&gt;                          Permission mode to use for the session (choices: \"acceptEdits\", \"bypassPermissions\", \"default\", \"plan\")\n  -c, --continue                                    Continue the most recent conversation\n  -r, --resume [sessionId]                          Resume a conversation - provide a session ID or interactively select a conversation to resume\n  --model &lt;model&gt;                                   Model for the current session. Provide an alias for the latest model (e.g. 'sonnet' or 'opus') or a model's full name (e.g. 'claude-sonnet-4-20250514').\n  --fallback-model &lt;model&gt;                          Enable automatic fallback to specified model when default model is overloaded (only works with --print)\n  --settings &lt;file-or-json&gt;                         Path to a settings JSON file or a JSON string to load additional settings from\n  --add-dir &lt;directories...&gt;                        Additional directories to allow tool access to\n  --ide                                             Automatically connect to IDE on startup if exactly one valid IDE is available\n  --strict-mcp-config                               Only use MCP servers from --mcp-config, ignoring all other MCP configurations\n  --session-id &lt;uuid&gt;                               Use a specific session ID for the conversation (must be a valid UUID)\n  -v, --version                                     Output the version number\n  -h, --help                                        Display help for command\n\nCommands:\n  config                                            Manage configuration (eg. claude config set -g theme dark)\n  mcp                                               Configure and manage MCP servers\n  migrate-installer                                 Migrate from global npm installation to local installation\n  setup-token                                       Set up a long-lived authentication token (requires Claude subscription)\n  doctor                                            Check the health of your Claude Code auto-updater\n  update                                            Check for updates and install if available\n  install [options] [target]                        Install Claude Code native build. Use [target] to specify version (stable, latest, or specific version)\n</code></pre>"},{"location":"agents/codex/","title":"Codex CLI - by OpenAI","text":""},{"location":"agents/codex/#installation","title":"Installation","text":"<pre><code># Install with npm\nnpm install -g @openai/codex\n# update to latest version with npm\nnpm update -g @openai/codex\n\n# Install with Homebrew\nbrew install codex\n</code></pre> <p>via developers.openai.com/codex/cli/</p>"},{"location":"agents/codex/#get-version","title":"Get Version","text":"<pre><code>% codex -V\ncodex-cli 0.36.0\n</code></pre>"},{"location":"agents/codex/#usage","title":"Usage","text":"<pre><code>Codex CLI\n\nIf no subcommand is specified, options will be forwarded to the interactive CLI.\n\nUsage: codex [OPTIONS] [PROMPT]\n       codex [OPTIONS] [PROMPT] &lt;COMMAND&gt;\n\nCommands:\n  exec        Run Codex non-interactively [aliases: e]\n  login       Manage login\n  logout      Remove stored authentication credentials\n  mcp         [experimental] Run Codex as an MCP server and manage MCP servers\n  proto       Run the Protocol stream via stdin/stdout [aliases: p]\n  completion  Generate shell completion scripts\n  debug       Internal debugging commands\n  apply       Apply the latest diff produced by Codex agent as a `git apply` to your local working tree [aliases: a]\n  resume      Resume a previous interactive session (picker by default; use --last to continue the most recent)\n  help        Print this message or the help of the given subcommand(s)\n\nArguments:\n  [PROMPT]\n          Optional user prompt to start the session\n\nOptions:\n  -c, --config &lt;key=value&gt;\n          Override a configuration value that would otherwise be loaded from `~/.codex/config.toml`. Use a dotted path (`foo.bar.baz`) to override nested values. The `value` portion is parsed as JSON. If it fails to parse as JSON, the raw string is\n          used as a literal.\n\n          Examples: - `-c model=\"o3\"` - `-c 'sandbox_permissions=[\"disk-full-read-access\"]'` - `-c shell_environment_policy.inherit=all`\n\n  -i, --image &lt;FILE&gt;...\n          Optional image(s) to attach to the initial prompt\n\n  -m, --model &lt;MODEL&gt;\n          Model the agent should use\n\n      --oss\n          Convenience flag to select the local open source model provider. Equivalent to -c model_provider=oss; verifies a local Ollama server is running\n\n  -p, --profile &lt;CONFIG_PROFILE&gt;\n          Configuration profile from config.toml to specify default options\n\n  -s, --sandbox &lt;SANDBOX_MODE&gt;\n          Select the sandbox policy to use when executing model-generated shell commands\n\n          [possible values: read-only, workspace-write, danger-full-access]\n\n  -a, --ask-for-approval &lt;APPROVAL_POLICY&gt;\n          Configure when the model requires human approval before executing a command\n\n          Possible values:\n          - untrusted:  Only run \"trusted\" commands (e.g. ls, cat, sed) without asking for user approval. Will escalate to the user if the model proposes a command that is not in the \"trusted\" set\n          - on-failure: Run all commands without asking for user approval. Only asks for approval if a command fails to execute, in which case it will escalate to the user to ask for un-sandboxed execution\n          - on-request: The model decides when to ask the user for approval\n          - never:      Never ask for user approval Execution failures are immediately returned to the model\n\n      --full-auto\n          Convenience alias for low-friction sandboxed automatic execution (-a on-failure, --sandbox workspace-write)\n\n      --dangerously-bypass-approvals-and-sandbox\n          Skip all confirmation prompts and execute commands without sandboxing. EXTREMELY DANGEROUS. Intended solely for running in environments that are externally sandboxed\n\n  -C, --cd &lt;DIR&gt;\n          Tell the agent to use the specified directory as its working root\n\n      --search\n          Enable web search (off by default). When enabled, the native Responses `web_search` tool is available to the model (no per\u2011call approval)\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -V, --version\n          Print version\n</code></pre>"},{"location":"agents/droid/","title":"Droid CLI (by Factory.ai)","text":""},{"location":"agents/droid/#installation","title":"Installation","text":"<pre><code># Install with npm\ncurl -fsSL https://app.factory.ai/cli | sh\n# update to latest version with npm\nnpm update -g opencode-ai\n</code></pre> <p>via factory.ai/product/ide</p>"},{"location":"agents/droid/#get-version","title":"Get Version","text":"<pre><code>% droid --version\n0.14.1\n</code></pre>"},{"location":"agents/droid/#usage","title":"Usage","text":""},{"location":"agents/gemini/","title":"Gemini CLI - by Google","text":""},{"location":"agents/gemini/#installation","title":"Installation","text":"<pre><code># Install with npm\nnpm install -g @google/gemini-cli\n# update to latest version with npm\nnpm update -g @google/gemini-cli\n\n# Install with Homebrew (only macOS)\nbrew install gemini-cli\n</code></pre> <p>via github.com/google-gemini/gemini-cli</p>"},{"location":"agents/gemini/#get-version","title":"Get Version","text":"<pre><code>% gemini -v\n0.4.1\n</code></pre>"},{"location":"agents/gemini/#usage","title":"Usage","text":"<pre><code>Usage: gemini [options] [command]\n\nGemini CLI - Launch an interactive CLI, use -p/--prompt for non-interactive mode\n\nCommands:\n  gemini [promptWords...]      Launch Gemini CLI                                                                                                                                                                                                  [default]\n  gemini mcp                   Manage MCP servers\n  gemini extensions &lt;command&gt;  Manage Gemini CLI extensions.\n\nOptions:\n  -m, --model                     Model                                                                                                                                                                                                            [string]\n  -p, --prompt                    Prompt. Appended to input on stdin (if any).                                                                     [deprecated: Use the positional prompt instead. This flag will be removed in a future version.] [string]\n  -i, --prompt-interactive        Execute the provided prompt and continue in interactive mode                                                                                                                                                     [string]\n  -s, --sandbox                   Run in sandbox?                                                                                                                                                                                                 [boolean]\n      --sandbox-image             Sandbox image URI.                                                                                                       [deprecated: Use settings.json instead. This flag will be removed in a future version.] [string]\n  -d, --debug                     Run in debug mode?                                                                                                                                                                             [boolean] [default: false]\n  -a, --all-files                 Include ALL files in context?                                                          [deprecated: Use @ includes in the application instead. This flag will be removed in a future version.] [boolean] [default: false]\n      --show-memory-usage         Show memory usage in status bar                                                                        [deprecated: Use settings.json instead. This flag will be removed in a future version.] [boolean] [default: false]\n  -y, --yolo                      Automatically accept all actions (aka YOLO mode, see https://www.youtube.com/watch?v=xvFZjo5PgG0 for more details)?                                                                            [boolean] [default: false]\n      --approval-mode             Set the approval mode: default (prompt for approval), auto_edit (auto-approve edit tools), yolo (auto-approve all tools)                                               [string] [choices: \"default\", \"auto_edit\", \"yolo\"]\n      --telemetry                 Enable telemetry? This flag specifically controls if telemetry is sent. Other --telemetry-* flags set specific values but do not enable telemetry on their own.\n                                                                                                                                                          [deprecated: Use settings.json instead. This flag will be removed in a future version.] [boolean]\n      --telemetry-target          Set the telemetry target (local or gcp). Overrides settings files.                             [deprecated: Use settings.json instead. This flag will be removed in a future version.] [string] [choices: \"local\", \"gcp\"]\n      --telemetry-otlp-endpoint   Set the OTLP endpoint for telemetry. Overrides environment variables and settings files.                                 [deprecated: Use settings.json instead. This flag will be removed in a future version.] [string]\n      --telemetry-otlp-protocol   Set the OTLP protocol for telemetry (grpc or http). Overrides settings files.                  [deprecated: Use settings.json instead. This flag will be removed in a future version.] [string] [choices: \"grpc\", \"http\"]\n      --telemetry-log-prompts     Enable or disable logging of user prompts for telemetry. Overrides settings files.                                      [deprecated: Use settings.json instead. This flag will be removed in a future version.] [boolean]\n      --telemetry-outfile         Redirect all telemetry output to the specified file.                                                                     [deprecated: Use settings.json instead. This flag will be removed in a future version.] [string]\n  -c, --checkpointing             Enables checkpointing of file edits                                                                    [deprecated: Use settings.json instead. This flag will be removed in a future version.] [boolean] [default: false]\n      --experimental-acp          Starts the agent in ACP mode                                                                                                                                                                                    [boolean]\n      --allowed-mcp-server-names  Allowed MCP server names                                                                                                                                                                                          [array]\n      --allowed-tools             Tools that are allowed to run without confirmation                                                                                                                                                                [array]\n  -e, --extensions                A list of extensions to use. If not provided, all extensions are used.                                                                                                                                            [array]\n  -l, --list-extensions           List all available extensions and exit.                                                                                                                                                                         [boolean]\n      --proxy                     Proxy for gemini client, like schema://user:password@host:port                                                           [deprecated: Use settings.json instead. This flag will be removed in a future version.] [string]\n      --include-directories       Additional directories to include in the workspace (comma-separated or multiple --include-directories)                                                                                                            [array]\n      --screen-reader             Enable screen reader mode for accessibility.                                                                                                                                                   [boolean] [default: false]\n      --session-summary           File to write session summary to.                                                                                                                                                                                [string]\n  -v, --version                   Show version number                                                                                                                                                                                             [boolean]\n  -h, --help                      Show help                                                                                                                                                                                                       [boolean]\n</code></pre>"},{"location":"agents/grok/","title":"Grok CLI - by xAI","text":""},{"location":"agents/grok/#installation","title":"Installation","text":"<pre><code># Install with npm\nnpm install -g @vibe-kit/grok-cli\n# update to latest version with npm\nnpm update -g @vibe-kit/grok-cli\n</code></pre> <p>via github.com/superagent-ai/grok-cli</p>"},{"location":"agents/grok/#get-version","title":"Get Version","text":"<pre><code>% grok -V\n1.0.1\n</code></pre>"},{"location":"agents/grok/#usage","title":"Usage","text":"<pre><code>Usage: grok [options] [command] [message...]\n\nA conversational AI CLI tool powered by Grok with text editor capabilities\n\nArguments:\n  message                     Initial message to send to Grok\n\nOptions:\n  -V, --version               output the version number\n  -d, --directory &lt;dir&gt;       set working directory (default: \"/Users/pforret/Code/pforret/LlmBrains\")\n  -k, --api-key &lt;key&gt;         Grok API key (or set GROK_API_KEY env var)\n  -u, --base-url &lt;url&gt;        Grok API base URL (or set GROK_BASE_URL env var)\n  -m, --model &lt;model&gt;         AI model to use (e.g., grok-code-fast-1, grok-4-latest) (or set GROK_MODEL env var)\n  -p, --prompt &lt;prompt&gt;       process a single prompt and exit (headless mode)\n  --max-tool-rounds &lt;rounds&gt;  maximum number of tool execution rounds (default: 400) (default: \"400\")\n  -h, --help                  display help for command\n\nCommands:\n  git                         Git operations with AI assistance\n  mcp                         Manage MCP (Model Context Protocol) servers\n</code></pre>"},{"location":"agents/opencode/","title":"OpenCode CLI","text":""},{"location":"agents/opencode/#installation","title":"Installation","text":"<pre><code># Install with npm\nnpm i -g opencode-ai\n# update to latest version with npm\nnpm update -g opencode-ai\n</code></pre> <p>via opencode.ai/docs</p>"},{"location":"agents/opencode/#get-version","title":"Get Version","text":"<pre><code>% opencode --version\n0.14.1\n</code></pre>"},{"location":"agents/opencode/#usage","title":"Usage","text":"<pre><code>\u2588\u2580\u2580\u2588 \u2588\u2580\u2580\u2588 \u2588\u2580\u2580 \u2588\u2580\u2580\u2584 \u2588\u2580\u2580 \u2588\u2580\u2580\u2588 \u2588\u2580\u2580\u2584 \u2588\u2580\u2580\n\u2588\u2591\u2591\u2588 \u2588\u2591\u2591\u2588 \u2588\u2580\u2580 \u2588\u2591\u2591\u2588 \u2588\u2591\u2591 \u2588\u2591\u2591\u2588 \u2588\u2591\u2591\u2588 \u2588\u2580\u2580\n\u2580\u2580\u2580\u2580 \u2588\u2580\u2580\u2580 \u2580\u2580\u2580 \u2580  \u2580 \u2580\u2580\u2580 \u2580\u2580\u2580\u2580 \u2580\u2580\u2580  \u2580\u2580\u2580\n\nCommands:\n  opencode [project]           start opencode tui                      [default]\n  opencode attach &lt;server&gt;     attach to a running opencode server\n  opencode run [message..]     run opencode with a message\n  opencode auth                manage credentials\n  opencode agent               manage agents\n  opencode upgrade [target]    upgrade opencode to the latest or a specific\n                               version\n  opencode serve               starts a headless opencode server\n  opencode models              list all available models\n  opencode export [sessionID]  export session data as JSON\n  opencode github              manage GitHub agent\n\nPositionals:\n  project  path to start opencode in                                    [string]\n\nOptions:\n      --help        show help                                          [boolean]\n  -v, --version     show version number                                [boolean]\n      --print-logs  print logs to stderr                               [boolean]\n      --log-level   log level\n                            [string] [choices: \"DEBUG\", \"INFO\", \"WARN\", \"ERROR\"]\n  -m, --model       model to use in the format of provider/model        [string]\n  -c, --continue    continue the last session                          [boolean]\n  -s, --session     session id to continue                              [string]\n  -p, --prompt      prompt to use                                       [string]\n      --agent       agent to use                                        [string]\n      --port        port to listen on                      [number] [default: 0]\n  -h, --hostname    hostname to listen on        [string] [default: \"127.0.0.1\"]\n</code></pre>"},{"location":"agents/qodo/","title":"Qodo CLI","text":""},{"location":"agents/qodo/#installation","title":"Installation","text":"<pre><code># install with npm\nnpm install -g @qodo/command\n</code></pre>"},{"location":"agents/qodo/#usage","title":"Usage","text":"<pre><code>  Usage\n    $ qodo [options] &lt;prompt&gt;\n    $ qodo run &lt;command&gt; [extra instructions]\n\n  Commands\n    run &lt;command&gt;          Execute a specific agent command with optional extra instructions\n    login                  Log in to Qodo\n    models                 Get available models\n    chat                   Start an interactive chat session\n    key list               List all API keys\n    key create &lt;name&gt;      Create a new API key with the given name\n    key revoke &lt;name&gt;      Revoke an API key by name\n    create-agent           Create a new agent by translating user requirements into a valid configuration\n    list-agents            List available agents from configuration (interactive in CLI mode)\n    list-mcp               List available local and remote tools\n    self-review            Analyze git changes and group them into logical change groups (opens web interface)\n    update                 Manage auto-updates (--check, --install, --configure)\n    -h, --help             Show help and exit\n    chain \"A &gt; B &gt; C\"     Run multiple agents sequentially (quote the chain!)\n    -v, --version          Show version and exit\n    -l, --log=path         Redirect console output to a file | stdout | stderr\n    -y, --yes              Confirm all prompts automatically (useful for CI)\n    -q, --silent           Suppress all console output except the final result (logs go to /dev/null)\n    -d, --debug            Enable debug mode with verbose logging and no data truncation\n    --dir=path         Specify project root directories (can be used multiple times)\n    --ci                   Run commands in CI mode\n    --mcp                  Run commands as tools from agent config in MCP-server-like mode\n    --ui                   Open Qodo with web interface\n    --webhook              Run commands as tools from agent config in webhook mode\n    --slack                Run as Slack bot (HTTP webhook mode by default)\n    -p, --port=number      Specify custom port for server modes (webhook, slack, mcp, ui)\n    --plan                 Use planning execution strategy (agent plans before acting)\n    --act                  Use direct execution strategy (agent acts immediately)\n    -m, --model=model_name Specify a custom model to use\n    --agent-file=path      Specify a custom path to agent configuration file\n    --mcp-file=path        Specify a custom path to mcp.json\n    -r, --resume=session_id Resume a task with the given session ID\n    --set key=value        Set custom key-value pairs (can be used multiple times)\n    --no-builtin           Disable built-in MCP servers (ripgrep, filesystem, git)\n    -t, --tools=list       Specify authorized tools (comma-separated, e.g., shell,git,filesystem)\n                           Note: Some tools have dependencies (e.g., qodo_merge requires git)\n    --tool &lt;name&gt;          Specify authorized tool (can be used multiple times, e.g., --tool shell --tool git --tool filesystem)\n    --permissions=level    Set permissions level (r=read, rw=read+write, rwx=full, -=none)\n    --with=session_id       Preload context with a previous session summarization (used before task/hotstart)\n    --sandbox=mode         Run shell commands in sandbox (macOS only) [off|permissive|restrictive|path/to/profile.sb] (default: off)\n\n  Examples\n    $ qodo chain \"improve &gt; review &gt; open-pr\"\n    $ qodo chain \"improve &gt; review &gt; open-pr\" --chain-step-timeout=600000\n    $ qodo chain \"improve &gt; review &gt; open-pr\" --chain-continue-on-error\n    $ qodo \"Review my latest changes and suggest improvements\"\n    $ qodo run review\n    $ qodo run review \"focus on security issues\"\n    $ qodo review --set coverage_score_threshold=0.8\n    $ qodo self-review\n    $ qodo \"Analyze code\" --dir /path/to/project1 --dir /path/to/project2 --permissions=r\n    $ qodo chat\n    $ qodo key list\n    $ qodo key create my-ci-key\n    $ qodo key revoke my-old-key\n    $ qodo create-agent --set goal=\"review code\" --set description=\"analyze pull requests\"\n    $ qodo list-agents\n    $ qodo list-mcp\n    $ qodo --ui\n    $ qodo --tools=shell,filesystem \"analyze this codebase\"\n    $ qodo --sandbox=./custom-profile.sb \"run a shell command with custom sandbox\"\n</code></pre>"},{"location":"agents/warp/","title":"Droid CLI (by Factory.ai)","text":""},{"location":"agents/warp/#installation","title":"Installation","text":"<pre><code># Install on macOS\n$ brew tap warpdotdev/warp\n$ brew update\n$ brew install --cask warp-cli\n</code></pre> <p>via docs.warp.dev/developers/cli</p>"},{"location":"agents/warp/#get-version","title":"Get Version","text":"<pre><code>% warp dump-debug-info\nWarp version: Some(\"v0.2025.09.17.08.11.stable_02\")\n</code></pre>"},{"location":"agents/warp/#usage","title":"Usage","text":"<pre><code>Warp, the Agentic Development Environment.\n\nThe Warp CLI is a tool for programming agents. You can use it to:\n* Create autonomous, asynchronous agents that respond to event triggers,\n  run on schedules, or respond to queries in third-party services.\n* Run one-off agents on remote machines.\n* Check Warp configuration in order to set up new agents.\n\nUsage: warp [OPTIONS]\n       warp &lt;COMMAND&gt;\n\nCommands:\n  agent                               Interact with Warp's agent\n  mcp                                 Manage MCP servers\n  login                               Log in to Warp\n  dump-debug-info, --dump-debug-info  Print debugging information and exit\n  help                                Print this message or the help of the given subcommand(s)\n\nOptions:\n      --api-key &lt;API_KEY&gt;  API key for server authentication (available to all subcommands)\n  -h, --help               Print help\n\nExamples:\n\n  $ warp agent run --prompt \"Warp anything\"\n\n  $ warp mcp list\n\nLearn more:\n* Use warp help to learn more about each command\n* Read the documentation at https://docs.warp.dev/developers/cli\n</code></pre>"},{"location":"blog/","title":"News","text":""},{"location":"blog/2025/10/v037/","title":"v0.3.7","text":"<p>* added opencode agent * disable/enable agents in Settings/LLM Brains * script (bash/powershell) for checking versions * scripts (bash/powershell) for updating active agents</p>"},{"location":"blog/archive/2025/","title":"2025","text":""},{"location":"blog/category/release/","title":"release","text":""}]}